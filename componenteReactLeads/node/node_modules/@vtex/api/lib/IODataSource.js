"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const apollo_datasource_1 = require("apollo-datasource");
const HttpClient_1 = require("./HttpClient");
/**
 * @deprecated Extend one of the subclasses of IOClient instead.
 */
class IODataSource extends apollo_datasource_1.DataSource {
    constructor(context, options = {}) {
        super();
        this.context = context;
        this.options = options;
        this.service = undefined;
        this.httpClient = undefined;
        this.initialized = false;
    }
    initialize(config) {
        const { context: { vtex: context }, cache: cacheStorage } = config;
        this.context = context;
        this.httpClient = this.httpClientFactory({
            context,
            options: Object.assign({ cacheStorage }, this.options),
            service: this.service,
        });
        this.initialized = true;
    }
    get http() {
        if (!this.initialized) {
            this.initialize({ context: { vtex: this.context } });
        }
        if (this.httpClient) {
            return this.httpClient;
        }
        throw new Error('IO Datasource was not initialized nor constructed with a context');
    }
}
exports.IODataSource = IODataSource;
exports.forWorkspace = ({ context, service, options }) => (context && service)
    ? HttpClient_1.HttpClient.forWorkspace(service, context, options || {})
    : undefined;
exports.forRoot = ({ context, service, options }) => (context && service)
    ? HttpClient_1.HttpClient.forRoot(service, context, options || {})
    : undefined;
exports.forExternal = ({ context, service, options }) => (context && service)
    ? HttpClient_1.HttpClient.forExternal(service, context, options || {})
    : undefined;
