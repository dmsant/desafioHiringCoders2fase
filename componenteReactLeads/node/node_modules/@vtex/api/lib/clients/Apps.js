"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const archiver_1 = __importDefault(require("archiver"));
const ramda_1 = require("ramda");
const tar_fs_1 = require("tar-fs");
const zlib_1 = require("zlib");
const HttpClient_1 = require("../HttpClient");
const utils_1 = require("../utils");
const appsStaleIfError_1 = require("../utils/appsStaleIfError");
const createRoutes = ({ account, workspace }) => {
    const routes = {
        Acknowledge: (app, service) => `${routes.App(app)}/acknowledge/${service}`,
        App: (app) => `${routes.Apps()}/${app}`,
        AppBundle: (locator, path) => `${routes.AppOrRegistry(locator)}/bundle/${path}`,
        AppOrRegistry: ({ name, version, build }) => build
            ? `${routes.Apps()}/${name}@${version}+${build}`
            : `${routes.Registry()}/${name}/${version}`,
        Apps: () => `${routes.Workspace}/apps`,
        Dependencies: () => `${routes.Workspace}/dependencies`,
        File: (locator, path) => `${routes.Files(locator)}/${path}`,
        Files: (locator) => `${routes.AppOrRegistry(locator)}/files`,
        Link: (app) => `${routes.Workspace}/v2/links/${app}`,
        LinkedAppFile: (app, path) => `${routes.Workspace}/apps/${app}/files/${path}`,
        Links: () => `${routes.Workspace}/links`,
        Master: `/${account}/master`,
        Meta: () => `${routes.Workspace}/v2/apps`,
        Registry: () => `${routes.Master}/registry`,
        ResolveDependencies: () => `${routes.Workspace}/dependencies/_resolve`,
        ResolveDependenciesWithManifest: () => `${routes.Workspace}/v2/apps/_resolve`,
        Settings: (app) => `${routes.App(app)}/settings`,
        Unlink: (app) => `${routes.Links()}/${app}`,
        Workspace: `/${account}/${workspace}`,
    };
    return routes;
};
const getVendorAndName = ({ id }) => utils_1.removeVersionFromAppId(id);
const notFound = (e) => {
    if (e.response && e.response.status === 404) {
        return {};
    }
    throw e;
};
const zipObj = (keys, values) => {
    let idx = 0;
    const len = Math.min(keys.length, values.length);
    const out = {};
    while (idx < len) {
        out[keys[idx]] = values[idx];
        idx += 1;
    }
    return out;
};
const workspaceFields = [
    '_resolvedDependencies',
    'settingsSchema',
    '_isRoot',
    '_buildFeatures',
].join(',');
class Apps extends HttpClient_1.InfraClient {
    constructor(context, options) {
        super('apps@0.x', context, options, true);
        this.installApp = (descriptor) => {
            if (descriptor.startsWith('infra:service-')) {
                return this.installRuntime(descriptor);
            }
            return this.http.post(this.routes.Apps(), { id: descriptor }, { metric: 'apps-install' });
        };
        this.uninstallApp = (app) => {
            return this.http.delete(this.routes.App(app), { metric: 'apps-uninstall' });
        };
        this.acknowledgeApp = (app, service) => {
            return this.http.put(this.routes.Acknowledge(app, service), null, { metric: 'apps-ack' });
        };
        this.link = async (app, files, { zlib } = {}) => {
            if (!(files[0] && files[0].path)) {
                throw new Error('Argument files must be an array of {path, content}, where content can be a String, a Buffer or a ReadableStream.');
            }
            const emptyChanges = files.filter(file => !file.content);
            if (emptyChanges.length > 0) {
                throw new Error(`Missing content for paths: ${emptyChanges.map(e => e.path).join('; ')}`);
            }
            const indexOfManifest = files.findIndex(({ path }) => path === 'manifest.json');
            if (indexOfManifest === -1) {
                throw new Error('No manifest.json file found in files.');
            }
            const zip = archiver_1.default('zip', { zlib });
            // Throw stream errors so they reject the promise chain.
            zip.on('error', (e) => {
                throw e;
            });
            const request = this.http.put(this.routes.Link(app), zip, {
                headers: { 'Content-Type': 'application/zip' },
                metric: 'apps-link',
            });
            files.forEach(({ content, path }) => zip.append(content, { name: path }));
            const finalize = zip.finalize();
            try {
                const [response] = await Promise.all([request, finalize]);
                response.bundleSize = zip.pointer();
                return response;
            }
            catch (e) {
                e.bundleSize = zip.pointer();
                throw e;
            }
        };
        this.patch = async (app, changes, { zlib } = {}) => {
            if (!(changes[0] && changes[0].path)) {
                throw new Error('Argument changes must be an array of {path, content}, where content can be a String, a Buffer or a ReadableStream.');
            }
            const files = changes.filter(change => !!change.content);
            const deletedFiles = changes
                .filter(change => !change.content)
                .map(change => change.path)
                .join(':');
            const zip = archiver_1.default('zip', { zlib });
            // Throw stream errors so they reject the promise chain.
            zip.on('error', (e) => {
                throw e;
            });
            const request = this.http.patch(this.routes.Link(app), zip, {
                headers: { 'Content-Type': 'application/zip' },
                metric: 'apps-patch',
                params: { deletedFiles },
            });
            files.forEach(({ content, path }) => zip.append(content, { name: path }));
            const finalize = zip.finalize();
            const [response] = await Promise.all([request, finalize]);
            return response;
        };
        this.unlink = (app) => {
            return this.http.delete(this.routes.Unlink(app));
        };
        this.unlinkAll = () => {
            return this.http.delete(this.routes.Links());
        };
        this.saveAppSettings = (app, settings) => {
            const headers = { 'Content-Type': 'application/json' };
            const metric = 'apps-save';
            return this.http.put(this.routes.Settings(app), settings, { headers, metric });
        };
        this.listApps = ({ oldVersion, since, service } = {}) => {
            const params = {
                oldVersion,
                service,
                since,
            };
            const metric = 'apps-list';
            const inflightKey = HttpClient_1.inflightUrlWithQuery;
            return this.http.get(this.routes.Apps(), { params, metric, inflightKey });
        };
        this.listAppFiles = (app, { prefix, nextMarker } = {}) => {
            const locator = utils_1.parseAppId(app);
            const linked = !!locator.build;
            const params = {
                marker: nextMarker,
                prefix,
            };
            const metric = linked ? 'apps-list-files' : 'registry-list-files';
            const inflightKey = HttpClient_1.inflightUrlWithQuery;
            return this.http.get(this.routes.Files(locator), { params, metric, inflightKey });
        };
        this.listLinks = () => {
            const inflightKey = HttpClient_1.inflightURL;
            return this.http.get(this.routes.Links(), { metric: 'apps-list-links', inflightKey });
        };
        this.getAppFile = (app, path, staleIfError) => {
            const { logger } = this.context;
            const locator = utils_1.parseAppId(app);
            const linked = !!locator.build;
            const inflightKey = HttpClient_1.inflightURL;
            if (staleIfError && this.memoryCache) {
                appsStaleIfError_1.saveVersion(app, this.memoryCache);
            }
            try {
                return this.http.getBuffer(this.routes.File(locator, path), {
                    cacheable: linked ? HttpClient_1.CacheType.Memory : HttpClient_1.CacheType.Disk,
                    inflightKey,
                    metric: linked ? 'apps-get-file' : 'registry-get-file',
                });
            }
            catch (error) {
                logger.error({ error, message: 'getAppFile failed', app, path });
                if (staleIfError && this.memoryCache) {
                    return appsStaleIfError_1.getFallbackFile(app, path, this.memoryCache, this);
                }
                throw error;
            }
        };
        this.getAppJSON = (app, path, nullIfNotFound) => {
            const locator = utils_1.parseAppId(app);
            const linked = !!locator.build;
            const inflightKey = HttpClient_1.inflightURL;
            return this.http.get(this.routes.File(locator, path), {
                cacheable: linked ? HttpClient_1.CacheType.Memory : HttpClient_1.CacheType.Any,
                inflightKey,
                metric: linked ? 'apps-get-json' : 'registry-get-json',
                nullIfNotFound,
            });
        };
        this.getLinkedAppByWorkspaceJSON = (app, path, nullIfNotFound) => {
            const inflightKey = HttpClient_1.inflightURL;
            return this.http.get(this.routes.LinkedAppFile(app, path), {
                cacheable: HttpClient_1.CacheType.Memory,
                inflightKey,
                metric: 'apps-linked-app-get-json',
                nullIfNotFound,
            });
        };
        this.getAppFileStream = (app, path) => {
            const locator = utils_1.parseAppId(app);
            const metric = locator.build ? 'apps-get-file-s' : 'registry-get-file-s';
            return this.http.getStream(this.routes.File(locator, path), { metric });
        };
        this.getApp = (app) => {
            const metric = 'apps-get-app';
            const inflightKey = HttpClient_1.inflightURL;
            return this.http.get(this.routes.App(app), { metric, inflightKey });
        };
        this.getAppSettings = (app) => {
            const inflightKey = HttpClient_1.inflightURL;
            const metric = 'apps-get-settings';
            return this.http.get(this.routes.Settings(app), { inflightKey, metric });
        };
        this.getAllAppsSettings = (listAppsOptions = {}) => {
            return this.listApps(listAppsOptions).then(({ data: installedApps }) => {
                const names = installedApps.map(getVendorAndName);
                const settingsPromises = names.map(vendorAndName => this.getAppSettings(vendorAndName).catch(notFound));
                return Promise.all(settingsPromises).then((settings) => {
                    return zipObj(names, settings);
                });
            });
        };
        this.getAppBundle = (app, bundlePath, generatePackageJson) => {
            const locator = utils_1.parseAppId(app);
            const params = generatePackageJson && { _packageJSONEngine: 'npm', _packageJSONFilter: 'vtex.render-builder@x' };
            const metric = locator.build ? 'apps-get-bundle' : 'registry-get-bundle';
            return this.http.getStream(this.routes.AppBundle(locator, bundlePath), {
                headers: {
                    Accept: 'application/x-gzip',
                    'Accept-Encoding': 'gzip',
                },
                metric,
                params,
            });
        };
        this.unpackAppBundle = (app, bundlePath, unpackPath, generatePackageJson) => {
            return this.getAppBundle(app, bundlePath, generatePackageJson)
                .then(stream => stream
                .pipe(zlib_1.createGunzip())
                .pipe(tar_fs_1.extract(unpackPath)));
        };
        this.getAppsMetaInfos = async (filter, staleWhileRevalidate = true) => {
            const { account, production } = this.context;
            const metric = 'get-apps-meta';
            const inflightKey = HttpClient_1.inflightURL;
            const key = appsStaleIfError_1.getMetaInfoKey(account);
            const cachedResponse = this.diskCache && await this.diskCache.get(key);
            if (cachedResponse && this.context.recorder) {
                this.context.recorder(cachedResponse.headers);
            }
            const metaInfoPromise = this.http.getRaw(this.routes.Meta(), { params: { fields: workspaceFields }, metric, inflightKey })
                .then((response) => {
                const { data, headers: responseHeaders } = response;
                if (this.diskCache) {
                    this.diskCache.set(key, {
                        appsMetaInfo: data.apps || [],
                        headers: responseHeaders,
                    });
                }
                return response;
            });
            const useCachedResponse = cachedResponse && production && staleWhileRevalidate;
            const appsMetaInfo = useCachedResponse
                ? cachedResponse.appsMetaInfo
                : await metaInfoPromise.then(response => response.data.apps);
            if (filter) {
                return appsMetaInfo.filter(appMeta => !!ramda_1.path(['_resolvedDependencies', filter], appMeta), appsMetaInfo);
            }
            return appsMetaInfo;
        };
        this.getDependencies = (filter = '') => {
            const params = { filter };
            const metric = 'apps-get-deps';
            const inflightKey = HttpClient_1.inflightUrlWithQuery;
            return this.http.get(this.routes.Dependencies(), { params, metric, inflightKey });
        };
        this.updateDependencies = () => {
            return this.http.put(this.routes.Dependencies(), null, { metric: 'apps-update-deps' });
        };
        this.updateDependency = (name, version, registry) => {
            return this.http.patch(this.routes.Apps(), [{ name, version, registry }], { metric: 'apps-update-dep' });
        };
        this.resolveDependencies = (apps, registries, filter = '') => {
            const params = { apps, registries, filter };
            const metric = 'apps-resolve-deps';
            const inflightKey = HttpClient_1.inflightUrlWithQuery;
            return this.http.get(this.routes.ResolveDependencies(), { params, metric, inflightKey });
        };
        this.resolveDependenciesWithManifest = (manifest, filter = '') => {
            const params = { filter };
            const metric = 'apps-resolve-deps-m';
            return this.http.post(this.routes.ResolveDependenciesWithManifest(), manifest, { params, metric });
        };
        this.installRuntime = (descriptor) => {
            const { account, workspace } = this.context;
            const [name, version] = descriptor.split('@');
            return this.http.patch(`http://apps.aws-us-east-1.vtex.io/${account}/${workspace}/apps`, [
                {
                    name,
                    version,
                },
            ]);
        };
        this.diskCache = options && options.diskCache;
        this.memoryCache = options && options.memoryCache;
        this._routes = createRoutes(context);
    }
    get routes() {
        return this._routes;
    }
}
exports.Apps = Apps;
