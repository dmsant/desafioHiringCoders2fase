import { Apps, Assets, Billing, BillingMetrics, Builder, Events, ID, LicenseManager, Logger, Messages, MessagesGraphQL, Metadata, Registry, Router, Segment, Session, Settings, VBase, Workspaces } from '.';
import { InstanceOptions, IOClientConstructor } from '../HttpClient';
import { IOContext } from '../service/typings';
import { TenantClient } from './Tenant';
export declare type ClientsImplementation<T extends IOClients> = new (clientOptions: Record<string, InstanceOptions>, ctx: IOContext) => T;
export declare class IOClients {
    private clientOptions;
    private ctx;
    private clients;
    constructor(clientOptions: Record<string, InstanceOptions>, ctx: IOContext);
    readonly apps: Apps;
    readonly assets: Assets;
    readonly billing: Billing;
    readonly billingMetrics: BillingMetrics;
    readonly builder: Builder;
    readonly events: Events;
    readonly id: ID;
    readonly licenseManager: LicenseManager;
    readonly logger: Logger;
    readonly messages: Messages;
    readonly messagesGraphQL: MessagesGraphQL;
    readonly metadata: Metadata;
    readonly registry: Registry;
    readonly router: Router;
    readonly segment: Segment;
    readonly settings: Settings;
    readonly session: Session;
    readonly tenant: TenantClient;
    readonly vbase: VBase;
    readonly workspaces: Workspaces;
    protected getOrSet<TClient extends IOClientConstructor>(key: string, Implementation: TClient): InstanceType<TClient>;
}
