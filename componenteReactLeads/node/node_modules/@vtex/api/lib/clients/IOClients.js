"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require(".");
const Tenant_1 = require("./Tenant");
class IOClients {
    constructor(clientOptions, ctx) {
        this.clientOptions = clientOptions;
        this.ctx = ctx;
        this.clients = {};
    }
    get apps() {
        return this.getOrSet('apps', _1.Apps);
    }
    get assets() {
        return this.getOrSet('assets', _1.Assets);
    }
    get billing() {
        return this.getOrSet('billing', _1.Billing);
    }
    get billingMetrics() {
        return this.getOrSet('billingMetrics', _1.BillingMetrics);
    }
    get builder() {
        return this.getOrSet('builder', _1.Builder);
    }
    get events() {
        return this.getOrSet('events', _1.Events);
    }
    get id() {
        return this.getOrSet('id', _1.ID);
    }
    get licenseManager() {
        return this.getOrSet('licenseManager', _1.LicenseManager);
    }
    get logger() {
        return this.getOrSet('logger', _1.Logger);
    }
    get messages() {
        return this.getOrSet('messages', _1.Messages);
    }
    get messagesGraphQL() {
        return this.getOrSet('messagesGraphQL', _1.MessagesGraphQL);
    }
    get metadata() {
        return this.getOrSet('metadata', _1.Metadata);
    }
    get registry() {
        return this.getOrSet('registry', _1.Registry);
    }
    get router() {
        return this.getOrSet('router', _1.Router);
    }
    get segment() {
        return this.getOrSet('segment', _1.Segment);
    }
    get settings() {
        return this.getOrSet('settings', _1.Settings);
    }
    get session() {
        return this.getOrSet('session', _1.Session);
    }
    get tenant() {
        return this.getOrSet('tenant', Tenant_1.TenantClient);
    }
    get vbase() {
        return this.getOrSet('vbase', _1.VBase);
    }
    get workspaces() {
        return this.getOrSet('workspaces', _1.Workspaces);
    }
    getOrSet(key, Implementation) {
        const options = Object.assign({}, this.clientOptions.default, this.clientOptions[key], { metrics });
        if (!this.clients[key]) {
            this.clients[key] = new Implementation(this.ctx, options);
        }
        return this.clients[key];
    }
}
exports.IOClients = IOClients;
