"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const HttpClient_1 = require("../HttpClient");
const error_1 = require("../utils/error");
const DEFAULT_SUBJECT = '-';
var LogLevel;
(function (LogLevel) {
    LogLevel["Debug"] = "debug";
    LogLevel["Info"] = "info";
    LogLevel["Warn"] = "warn";
    LogLevel["Error"] = "error";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
class Logger extends HttpClient_1.InfraClient {
    constructor(context, options) {
        super('colossus@0.x', Object.assign({}, context, { recorder: undefined }), Object.assign({}, options, { concurrency: 1 }));
        this.debug = (message, subject = DEFAULT_SUBJECT) => this.sendLog(subject, message, LogLevel.Debug);
        this.info = (message, subject = DEFAULT_SUBJECT) => this.sendLog(subject, message, LogLevel.Info);
        this.warn = (warning, subject = DEFAULT_SUBJECT) => this.sendLog(subject, error_1.cleanError(warning), LogLevel.Warn);
        this.error = (error, subject = DEFAULT_SUBJECT) => this.sendLog(subject, error_1.cleanError(error), LogLevel.Error);
        this.sendLog = (_, message, level) => {
            // Use stdout logger
            if (this.logger) {
                this.logger.log(message, level);
            }
            // Deprecate logging to colossus
            console.warn('Logger in ctx.clients.logger is deprecated, please use ctx.vtex.logger instead.');
            return Promise.resolve();
        };
        this.logger = context.logger;
    }
}
exports.Logger = Logger;
