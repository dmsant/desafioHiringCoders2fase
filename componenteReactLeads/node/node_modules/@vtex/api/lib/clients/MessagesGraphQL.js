"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ramda_1 = require("ramda");
const HttpClient_1 = require("../HttpClient");
class MessagesGraphQL extends HttpClient_1.AppGraphQLClient {
    constructor(vtex, options) {
        super('vtex.messages@1.x', vtex, options);
        this.translate = async (args) => this.graphql.query({
            query: `
    query Translate($args: NewTranslateArgs!) {
      newTranslate(args: $args)
    }
    `,
            variables: { args },
        }, {
            metric: 'messages-translate',
        }).then(ramda_1.path(['data', 'newTranslate']));
        this.translateV2 = (args) => this.graphql.query({
            query: `
      query Translate($args: TranslateArgs!) {
        translate(args: $args)
      }
      `,
            variables: { args },
        }, {
            metric: 'messages-translate-v2',
        }).then(ramda_1.path(['data', 'translate']));
        this.save = (args) => this.graphql.mutate({
            mutate: `
    mutation Save($args: SaveArgs!) {
      save(args: $args)
    }
    `,
            variables: { args },
        }, {
            metric: 'messages-save-translation',
        }).then(ramda_1.path(['data', 'save']));
        this.saveV2 = (args) => this.graphql.mutate({
            mutate: `
    mutation SaveV2($args: SaveArgsV2!) {
      saveV2(args: $args)
    }
    `,
            variables: { args },
        }, {
            metric: 'messages-saveV2-translation',
        }).then(ramda_1.path(['data', 'saveV2']));
    }
}
exports.MessagesGraphQL = MessagesGraphQL;
