"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dataloader_1 = __importDefault(require("dataloader"));
const ramda_1 = require("ramda");
const message_1 = require("../../../utils/message");
const sortByProvider = (indexedMessages) => ramda_1.sortBy(([_, message]) => message_1.providerFromMessage(message), indexedMessages);
const sortByIndex = (indexedTranslations) => ramda_1.sortBy(([index, _]) => Number(index), indexedTranslations);
exports.messagesLoader = (clients) => new dataloader_1.default(async (messages) => {
    const to = messages[0].to;
    const from = messages[0].from;
    const indexedMessages = ramda_1.toPairs(messages);
    const sortedIndexedMessages = sortByProvider(indexedMessages);
    const originalIndexes = ramda_1.pluck(0, sortedIndexedMessages);
    const sortedMessages = ramda_1.pluck(1, sortedIndexedMessages);
    const messagesByProvider = {};
    const indexByProvider = {};
    sortedMessages.forEach((message, index) => {
        const provider = message_1.providerFromMessage(message);
        if (!messagesByProvider[provider]) {
            messagesByProvider[provider] = [];
            indexByProvider[provider] = [];
        }
        messagesByProvider[provider].push(ramda_1.pick(['id', 'content', 'description', 'behavior'], message));
        indexByProvider[provider].push(index);
    });
    const messagesInput = ramda_1.compose(ramda_1.values, ramda_1.mapObjIndexed((messagesArray, provider) => ({
        messages: ramda_1.map(message_1.removeProviderFromId, messagesArray),
        provider,
    })))(messagesByProvider);
    const translations = await clients.messagesGraphQL.translate({
        from,
        messages: messagesInput,
        to,
    });
    const indexedTranslations = ramda_1.zip(originalIndexes, translations);
    const translationsInOriginalOrder = sortByIndex(indexedTranslations);
    return ramda_1.pluck(1, translationsInOriginalOrder);
});
