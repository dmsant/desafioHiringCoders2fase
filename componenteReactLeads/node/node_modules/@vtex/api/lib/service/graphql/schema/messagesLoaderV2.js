"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dataloader_1 = __importDefault(require("dataloader"));
const ramda_1 = require("ramda");
const sortByContentAndFrom = (indexedMessages) => ramda_1.sortBy(([_, { content, from }]) => `__from:${from}__content:${content}`, indexedMessages);
const sortByIndex = (indexedTranslations) => ramda_1.sortBy(([index, _]) => Number(index), indexedTranslations);
const indexMessagesByFrom = (messages) => messages.reduce((acc, { from, context, content, behavior }) => {
    const lastIndexed = acc.length && acc[acc.length - 1];
    const formatted = {
        behavior,
        content,
        context,
    };
    if (lastIndexed && lastIndexed.from === from) {
        lastIndexed.messages.push(formatted);
    }
    else {
        acc.push({
            from,
            messages: [formatted],
        });
    }
    return acc;
}, []);
exports.messagesLoaderV2 = (clients) => new dataloader_1.default(async (messages) => {
    const to = messages[0].to;
    const indexedMessages = ramda_1.toPairs(messages);
    const sortedIndexedMessages = sortByContentAndFrom(indexedMessages);
    const originalIndexes = ramda_1.pluck(0, sortedIndexedMessages);
    const sortedMessages = ramda_1.pluck(1, sortedIndexedMessages);
    const indexedByFrom = indexMessagesByFrom(sortedMessages);
    const depTree = ramda_1.any(ioMessage => !!ioMessage.withAppsMetaInfo, messages) ? JSON.stringify(await clients.apps.getAppsMetaInfos()) : '';
    const translations = await clients.messagesGraphQL.translateV2({
        depTree,
        indexedByFrom,
        to,
    });
    const indexedTranslations = ramda_1.zip(originalIndexes, translations);
    const translationsInOriginalOrder = sortByIndex(indexedTranslations);
    return ramda_1.pluck(1, translationsInOriginalOrder);
});
