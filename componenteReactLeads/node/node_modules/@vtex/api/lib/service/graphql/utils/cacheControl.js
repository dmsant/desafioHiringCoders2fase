"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ramda_1 = require("ramda");
const domain_1 = require("../../../utils/domain");
const maxAgeEnum_1 = require("../utils/maxAgeEnum");
const linked = !!process.env.VTEX_APP_LINK;
const pluck = (p) => (list) => ramda_1.pluck(p, list);
const publicRegExp = ramda_1.compose((exp) => new RegExp(exp), (exp) => `.*${exp}.*`, ramda_1.replace('.', '\\.'));
const pickCacheControlHints = (response) => ramda_1.path(['extensions', 'cacheControl', 'hints'], response);
const minArray = (nums) => ramda_1.reduce(ramda_1.min, maxAgeEnum_1.maxAgeEnums.LONG, nums);
const minMaxAge = (hints) => ramda_1.compose(minArray, ramda_1.reject(ramda_1.isNil), pluck('maxAge'))(hints);
const anyPrivate = (hints) => ramda_1.compose(ramda_1.any(ramda_1.equals('PRIVATE')), pluck('scope'))(hints);
const anySegment = (hints) => ramda_1.compose(ramda_1.any(ramda_1.equals('SEGMENT')), pluck('scope'))(hints);
const isPrivateRoute = ({ request: { headers } }) => ramda_1.test(/_v\/graphql\/private\/v*/, headers['x-forwarded-path'] || '');
const isPublicEndpoint = ({ request: { headers } }) => {
    if (headers.origin) {
        return false;
    }
    const host = headers['x-forwarded-host'] || '';
    return domain_1.PUBLIC_DOMAINS.some(endpoint => ramda_1.test(publicRegExp(endpoint), host));
};
exports.cacheControl = (response, ctx) => {
    const { vtex: { production } } = ctx;
    const hints = response && pickCacheControlHints(response);
    const age = hints && minMaxAge(hints);
    const isPrivate = hints && anyPrivate(hints);
    const segment = hints && anySegment(hints);
    const maxAge = linked
        ? 'no-store'
        : (isPublicEndpoint(ctx) || !production)
            ? 'no-cache'
            : `max-age=${age}`;
    return {
        maxAge,
        scope: (isPrivate || isPrivateRoute(ctx)) ? 'private' : 'public',
        segment,
    };
};
