import React, { FunctionComponent } from 'react';
interface LoadingContext {
    setLoading: (treePath: string, isLoading: boolean) => void;
    isParentLoading?: boolean;
}
declare const LoadingContext: React.Context<LoadingContext>;
declare const LoadingContextProvider: React.Provider<LoadingContext>;
/** TODO: LoadingWrapper is in the end a makeshift Suspense.
 * Should probably be replaced in the future. */
declare const LoadingWrapper: FunctionComponent;
declare const useLoadingContext: () => LoadingContext;
declare const withLoading: <T extends {}>(Component: React.ComponentType<T>) => React.FunctionComponent<T>;
export { LoadingWrapper, useLoadingContext, withLoading, LoadingContextProvider, };
